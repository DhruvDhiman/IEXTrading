// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TradingData.DataAccess;

namespace TradingData.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180729163646_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TradingData.Models.Company", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("date");

                    b.Property<string>("iexId");

                    b.Property<bool>("isEnabled");

                    b.Property<string>("name");

                    b.Property<string>("type");

                    b.HasKey("symbol");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("TradingData.Models.Quote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("avgTotalVolume");

                    b.Property<string>("calculationPrice");

                    b.Property<float>("change");

                    b.Property<float>("changePercent");

                    b.Property<float>("close");

                    b.Property<long>("closeTime");

                    b.Property<string>("companyName");

                    b.Property<float>("delayedPrice");

                    b.Property<long>("delayedPriceTime");

                    b.Property<float>("extendedChange");

                    b.Property<float>("extendedChangePercent");

                    b.Property<float>("extendedPrice");

                    b.Property<long>("extendedPriceTime");

                    b.Property<float>("high");

                    b.Property<float>("iexAskPrice");

                    b.Property<float>("iexAskSize");

                    b.Property<float>("iexBidPrice");

                    b.Property<float>("iexBidSize");

                    b.Property<long>("iexLastUpdated");

                    b.Property<float>("iexMarketPercent");

                    b.Property<float>("iexRealtimePrice");

                    b.Property<float>("iexRealtimeSize");

                    b.Property<float>("iexVolume");

                    b.Property<float>("latestPrice");

                    b.Property<string>("latestSource");

                    b.Property<string>("latestTime");

                    b.Property<long>("latestUpdate");

                    b.Property<float>("latestVolume");

                    b.Property<float>("low");

                    b.Property<long>("marketCap");

                    b.Property<float>("open");

                    b.Property<long>("openTime");

                    b.Property<float>("peRatio");

                    b.Property<float>("previousClose");

                    b.Property<string>("primaryExchange");

                    b.Property<string>("sector");

                    b.Property<string>("symbol");

                    b.Property<float>("week52High");

                    b.Property<float>("week52Low");

                    b.Property<float>("ytdChange");

                    b.HasKey("QuoteId");

                    b.ToTable("Quotes");
                });
#pragma warning restore 612, 618
        }
    }
}
